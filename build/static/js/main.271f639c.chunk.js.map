{"version":3,"sources":["logo.svg","apiFacade.js","Loader.js","Main.js","MainAdvanced.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","facade","predict","name","type","a","options","makeOptions","fetch","res","json","ok","status","fullError","advancedPredict","method","n","gamma","kernel","addToken","body","opts","headers","JSON","stringify","Loader","className","Main","props","onChange","evt","persist","setState","target","id","value","state","image","loading","error","this","mounted","replace","console","log","graph","encodedData","toString","createImageFromB64","defaultValue","changeType","onClick","doFetch","src","style","width","window","innerWidth","height","length","Component","MainAdvanced","gammaType","changeMethod","changeAmount","step","min","changeKernel","changeGammaType","changeGamma","max","App","to","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.271f639c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-throw-literal */\r\n//const URL = \"http://localhost:5001\";\r\n\r\n\r\n\r\nclass ApiFacade {\r\n    //Insert utility-methods from a latter step (d) here\r\n    makeOptions(method, addToken, body) {\r\n        var opts = {\r\n            method: method,\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json',\r\n            }\r\n        }\r\n        if (body) {\r\n            opts.body = JSON.stringify(body);\r\n        }\r\n        return opts;\r\n    }\r\n\r\n    predict = async (name, type) => {\r\n        const options = this.makeOptions(\"POST\", false, { name: name, type: type });\r\n        const res = await fetch(\"/api/predict\", options)\r\n        const json = await res.json();\r\n        if (!res.ok) {\r\n            throw { status: res.status, fullError: json }\r\n        }\r\n        return json;\r\n    }\r\n    advancedPredict = async (name, type, method, n, gamma, kernel) => {\r\n        const options = this.makeOptions(\"POST\", false, { name: name, type: type, method: method, n: n, gamma: gamma, kernel:kernel});\r\n        const res = await fetch(\"/api/predict/specific\", options)\r\n        const json = await res.json();\r\n        if (!res.ok) {\r\n            throw { status: res.status, fullError: json }\r\n        }\r\n        return json;\r\n    }\r\n}\r\n\r\n\r\nconst facade = new ApiFacade();\r\n\r\nexport default facade;\r\n","import React from 'react';\r\n\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport facade from './apiFacade'\r\nimport Loader from './Loader'\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: 'Google',\r\n            type: 'STOCK',\r\n            image: '',\r\n            loading: false,\r\n            error: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        this.mounted = true;\r\n        /* if(this.mounted){\r\n            \r\n        } */\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    async doFetch(name, type) {\r\n        this.setState({\r\n            loading: true,\r\n            error: ''\r\n        })\r\n        name = name.replace(' ', '+')\r\n        console.log(name, type)\r\n        var json = await facade.predict(name, type)\r\n        var encodedData = await json.graph\r\n        if (encodedData != null) {\r\n            encodedData = encodedData.toString().replace('b\\'', '').replace('\\'', '')\r\n            this.createImageFromB64(encodedData)\r\n        } else {\r\n            this.setState({\r\n                error: json.error\r\n            })\r\n        }\r\n        this.setState({\r\n            loading: false\r\n        })\r\n        //graph = graph.toString().replace('b\\'','')\r\n        //graph = base64.decode(graph)\r\n        //await console.log(json)\r\n        //console.log(graph)\r\n    }\r\n\r\n\r\n\r\n    onChange = evt => {\r\n        evt.persist();\r\n        this.setState({\r\n            [evt.target.id]: evt.target.value,\r\n        })\r\n    };\r\n\r\n    changeType(evt) {\r\n        evt.persist()\r\n        var type = evt.target.value\r\n        this.setState({\r\n            type: type\r\n        })\r\n    }\r\n\r\n    createImageFromB64(encodedData) {\r\n        var image = 'data:image/png[jpg];base64, ' + encodedData\r\n        this.setState({\r\n            image: image\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <div>\r\n                    <div className=\"name-input-container\">\r\n                        <form onChange={this.onChange}>\r\n                            <input className=\"nameInput\" type=\"text\" id=\"name\" defaultValue='Google'\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"type-input-container\">\r\n                        <select className=\"Type\" onChange={(evt) => this.changeType(evt)}>\r\n                            <option value=\"STOCK\">Stock</option>\r\n                            <option value=\"FOREX\">Forex</option>\r\n                            <option value=\"CRYPTO\">Crypto Currency</option>\r\n                        </select>\r\n                    </div>\r\n                    <button onClick={(evt) => this.doFetch(this.state.name, this.state.type)}\r\n                    >Predict</button>\r\n                </div>\r\n                <div>\r\n                    {this.state.loading ? (<div className=\"loader-container\"><Loader /></div>) : (<img src={this.state.image} style={{ width: window.innerWidth, height: 'auto' }} />)}\r\n                    {this.state.error.length > 0 ? (<h1>{this.state.error}</h1>) : (<div></div>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Main;","import React, { Component } from 'react';\r\nimport facade from './apiFacade'\r\nimport Loader from './Loader'\r\n\r\nclass MainAdvanced extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: 'Google',\r\n            type: 'STOCK',\r\n            method: 'LR',\r\n            n: 30,\r\n            gammaType: 'auto',\r\n            gamma: 1.0,\r\n            kernel: 'rbf',\r\n            image: '',\r\n            loading: false,\r\n            error: ''\r\n        }\r\n    }\r\n\r\n\r\n    async doFetch(name, type, method, n, gamma, kernel, gammaType) {\r\n        this.setState({\r\n            loading: true,\r\n            error: ''\r\n        })\r\n        name = name.replace(' ', '+')\r\n        console.log(name, type)\r\n        if (gammaType != 'specific') {\r\n            gamma = gammaType\r\n        }\r\n        var json = await facade.advancedPredict(name, type, method, n, gamma, kernel)\r\n        var encodedData = await json.graph\r\n        if (encodedData != null) {\r\n            encodedData = encodedData.toString().replace('b\\'', '').replace('\\'', '')\r\n            this.createImageFromB64(encodedData)\r\n        } else {\r\n            this.setState({\r\n                error: json.error\r\n            })\r\n        }\r\n        this.setState({\r\n            loading: false\r\n        })\r\n        //graph = graph.toString().replace('b\\'','')\r\n        //graph = base64.decode(graph)\r\n        //await console.log(json)\r\n        //console.log(graph)\r\n    }\r\n\r\n\r\n\r\n    onChange = evt => {\r\n        evt.persist();\r\n        this.setState({\r\n            [evt.target.id]: evt.target.value,\r\n        })\r\n    };\r\n\r\n    changeType(evt) {\r\n        evt.persist()\r\n        var type = evt.target.value\r\n        this.setState({\r\n            type: type\r\n        })\r\n    }\r\n    changeAmount(evt) {\r\n        evt.persist()\r\n        var n = evt.target.value\r\n        this.setState({\r\n            n: n\r\n        })\r\n    }\r\n    changeMethod(evt) {\r\n        evt.persist()\r\n        var method = evt.target.value\r\n        this.setState({\r\n            method: method\r\n        })\r\n    }\r\n    changeKernel(evt) {\r\n        evt.persist()\r\n        var kernel = evt.target.value\r\n        this.setState({\r\n            kernel: kernel\r\n        })\r\n    }\r\n    changeGamma(evt) {\r\n        evt.persist()\r\n        var gamma = evt.target.value\r\n        this.setState({\r\n            gamma: gamma\r\n        })\r\n    }\r\n    changeGammaType(evt) {\r\n        evt.persist()\r\n        var type = evt.target.value\r\n        this.setState({\r\n            gammaType: type\r\n        })\r\n    }\r\n\r\n    createImageFromB64(encodedData) {\r\n        var image = 'data:image/png[jpg];base64, ' + encodedData\r\n        this.setState({\r\n            image: image\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n\r\n\r\n                <div>\r\n\r\n                    <div className=\"name-input-container\">\r\n                        <form>\r\n\r\n                            <input onChange={this.onChange} className=\"nameInput\" type=\"text\" id=\"name\" defaultValue='Google'\r\n                            />\r\n                        </form>\r\n\r\n                    </div>\r\n                    <div className=\"type-input-container\">\r\n                        <select className=\"Type\" onChange={(evt) => this.changeType(evt)}>\r\n                            <option value=\"STOCK\">Stock</option>\r\n                            <option value=\"FOREX\">Forex</option>\r\n                            <option value=\"CRYPTO\">Crypto Currency</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"type-input-container\">\r\n                        <select className=\"Method\" onChange={(evt) => this.changeMethod(evt)}>\r\n                            <option value=\"LR\">Linear Regression</option>\r\n                            <option value=\"SVM\">Support Vector Regression</option>\r\n                        </select>\r\n                        <input\r\n                            onChange={(evt) => this.changeAmount(evt)}\r\n                            type=\"number\"\r\n                            step=\"1\"\r\n                            min='30'\r\n                            defaultValue={30}\r\n                        ></input>\r\n                    </div>\r\n\r\n                    {this.state.method == 'SVM' ? (<div>\r\n                        <div className=\"type-input-container\">\r\n                            <select className=\"Kernel\" onChange={(evt) => this.changeKernel(evt)}>\r\n                                <option value=\"rbf\">RBF</option>\r\n                                <option value=\"linear\">Linear</option>\r\n                                <option value=\"poly\">Poly</option>\r\n                                <option value=\"sigmoid\">Sigmoid</option>\r\n                                <option value=\"precomputed\">Precomputed</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"type-input-container\">\r\n                            <select className=\"Gamma\" onChange={(evt) => this.changeGammaType(evt)}>\r\n                                <option value=\"auto\">Auto</option>\r\n                                <option value=\"scale\">Scale</option>\r\n                                <option value=\"specific\">Specific...</option>\r\n                            </select></div>\r\n                        {this.state.gammaType == 'specific' ? (<div><input\r\n                            onChange={(evt) => this.changeGamma(evt)}\r\n                            type=\"number\"\r\n                            step=\"0.001\"\r\n                            min='0'\r\n                            max='1' defaultValue={1.0}\r\n                        ></input></div>) : (<div></div>)}\r\n                    </div>\r\n                    ) : (\r\n                            <div></div>\r\n                        )}\r\n\r\n                    <button onClick={(evt) => this.doFetch(this.state.name, this.state.type, this.state.method, this.state.n, this.state.gamma, this.state.kernel, this.state.gammaType)}\r\n                    >Predict</button>\r\n\r\n                </div>\r\n                <div>\r\n                    {this.state.loading ? (<div className=\"loader-container\"><Loader /></div>) : (<img src={this.state.image} style={{ width: window.innerWidth, height: 'auto' }} />)}\r\n                    {this.state.error.length > 0 ? (<h1>{this.state.error}</h1>) : (<div></div>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MainAdvanced;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './Main'\nimport MainAdvanced from './MainAdvanced'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <ul>\n          <li>\n            <Link to=\"/basic\">basic</Link>\n          </li>\n          <li>\n            <Link to=\"/advanced\">advanced</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route path=\"/basic\" exact component={Main}>\n          </Route>\n          <Route path=\"/advanced\" exact component={MainAdvanced}>\n          </Route>\n        </Switch>\n\n\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}