{"version":3,"sources":["logo.svg","apiFacade.js","Loader.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","facade","predict","name","type","a","options","makeOptions","fetch","res","json","ok","status","fullError","method","addToken","body","opts","headers","JSON","stringify","Loader","className","Main","props","onChange","evt","persist","setState","target","id","value","state","image","loading","error","this","mounted","replace","console","log","graph","encodedData","toString","createImageFromB64","defaultValue","changeType","onClick","doFetch","src","style","width","window","innerWidth","height","length","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bb5cceea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-throw-literal */\r\n//const URL = \"http://localhost:5001\";\r\n\r\n\r\n\r\nclass ApiFacade {\r\n    //Insert utility-methods from a latter step (d) here\r\n    makeOptions(method, addToken, body) {\r\n        var opts = {\r\n            method: method,\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json',\r\n            }\r\n        }\r\n        if (body) {\r\n            opts.body = JSON.stringify(body);\r\n        }\r\n        return opts;\r\n    }\r\n\r\n    predict = async (name, type) => {\r\n        const options = this.makeOptions(\"POST\", false, { name: name, type: type });\r\n        const res = await fetch(\"/api/predict\", options)\r\n        const json = await res.json();\r\n        if (!res.ok) {\r\n            throw { status: res.status, fullError: json }\r\n        }\r\n        return json;\r\n    }\r\n}\r\n\r\n\r\nconst facade = new ApiFacade();\r\n\r\nexport default facade;\r\n","import React from 'react';\r\n\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport facade from './apiFacade'\r\nimport Loader from './Loader'\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: 'Google',\r\n            type: 'STOCK',\r\n            image: '',\r\n            loading: false,\r\n            error: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        this.mounted = true;\r\n        /* if(this.mounted){\r\n            \r\n        } */\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    async doFetch(name, type) {\r\n        this.setState({\r\n            loading: true,\r\n            error: ''\r\n        })\r\n        name = name.replace(' ', '+')\r\n        console.log(name, type)\r\n        var json = await facade.predict(name, type)\r\n        var encodedData = await json.graph\r\n        if (encodedData != null) {\r\n            encodedData = encodedData.toString().replace('b\\'', '').replace('\\'', '')\r\n            this.createImageFromB64(encodedData)\r\n        } else {\r\n            this.setState({\r\n                error: json.error\r\n            })\r\n        }\r\n        this.setState({\r\n            loading: false\r\n        })\r\n        //graph = graph.toString().replace('b\\'','')\r\n        //graph = base64.decode(graph)\r\n        //await console.log(json)\r\n        //console.log(graph)\r\n    }\r\n\r\n\r\n\r\n    onChange = evt => {\r\n        evt.persist();\r\n        this.setState({\r\n            [evt.target.id]: evt.target.value,\r\n        })\r\n    };\r\n\r\n    changeType(evt) {\r\n        evt.persist()\r\n        var type = evt.target.value\r\n        this.setState({\r\n            type: type\r\n        })\r\n    }\r\n\r\n    createImageFromB64(encodedData) {\r\n        var image = 'data:image/png[jpg];base64, ' + encodedData\r\n        this.setState({\r\n            image: image\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"name-input-container\">\r\n                        <form onChange={this.onChange}>\r\n                            <input className=\"nameInput\" type=\"text\" id=\"name\" defaultValue='Google'\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"type-input-container\">\r\n                        <select className=\"Type\" onChange={(evt) => this.changeType(evt)}>\r\n                            <option value=\"STOCK\">Stock</option>\r\n                            <option value=\"FOREX\">Forex</option>\r\n                            <option value=\"CRYPTO\">Crypto Currency</option>\r\n                        </select>\r\n                    </div>\r\n                    <button onClick={(evt) => this.doFetch(this.state.name, this.state.type)}\r\n                    >Go</button>\r\n                </div>\r\n                <div>\r\n                    {this.state.loading ? (<div className=\"loader-container\"><Loader /></div>) : (<img src={this.state.image} style={{ width: window.innerWidth, height: 'auto' }} />)}\r\n                    {this.state.error.length > 0 ? (<h1>{this.state.error}</h1>): (<div></div>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './Main'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}